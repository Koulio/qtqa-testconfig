<?xml version='1.0' encoding='UTF-8'?>
<matrix-project>
  <description>Create configure.exe and add it to the src archives for Qt [% qt_version %] [% qt_license %]</description>
    <disabled>[% enabled ? "false" : "true" %]</disabled>

  <!-- clean up old builds -->
  <logRotator>
    <daysToKeep>[% log_days_to_keep %]</daysToKeep>
    <numToKeep>[% log_num_to_keep %]</numToKeep>
    <artifactDaysToKeep>[% log_days_to_keep %]</artifactDaysToKeep>
    <artifactNumToKeep>[% log_num_to_keep %]</artifactNumToKeep>
  </logRotator>

  <properties>
  </properties>

  <triggers/>

  <axes>
    <hudson.matrix.LabelAxis>
      <name>cfg</name>
      <values>
       [%- FOREACH cfg IN configurations %]
        <string>[% cfg %]</string>
       [%- END %]
      </values>
    </hudson.matrix.LabelAxis>
  </axes>

  <!-- pre-build steps -->
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper/>
  </buildWrappers>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
      <condition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@0.10"/>
      <buildStep class="hudson.tasks.BatchFile">
        <command>
echo %cfg%|findstr /i msvc2010 >nul:
if %errorlevel%==0 (
set "PATH=%PATH_MSVC2010%;%PATH%"
set "LIB=%LIB_MSVC2010%"
set "LIBPATH=%LIBPATH_MSVC2010%"
set "INCLUDE=%INCLUDE_MSVC2010%"
)
rd /S /Q %PKG_NODE_ROOT%\build
mkdir %PKG_NODE_ROOT%\build
cd %PKG_NODE_ROOT%\build
mkdir qtsdk
cd qtsdk
# Fetch qtsdk.git to get release-tools/ and needed scripts
call git init || exit 1
call git fetch qt-gerrit-mirror:[% gerrit_project %] refs/heads/[% branch %] || exit 1
call git checkout FETCH_HEAD || exit 1
cd ..
mkdir work
cd work
set
python -u ../qtsdk/release-tools/helpers/create_configure_exe.py src_url=[% artifacts_download_url %]/[% qt_license %]/qt/[% qt_version %]/latest/src/single/qt-everywhere-[% qt_license %]-src-[% qt_version %].zip mdl_url=[% artifacts_download_url %]/[% qt_license %]/qt/[% qt_version %]/latest/src/submodules_zip/qtbase-[% qt_license %]-src-[% qt_version %].zip do_7z

set ARTF_UPLOAD_PATH=[% artifacts_upload_host %]:[% artifacts_upload_path %]/[% qt_license %]/qt/[% qt_version %]/latest/src

cd %PKG_NODE_ROOT%\build\work
%SCP% -v qt-everywhere-[% qt_license %]-src-[% qt_version %].zip %ARTF_UPLOAD_PATH%/single/
%SCP% -v qtbase-[% qt_license %]-src-[% qt_version %].zip %ARTF_UPLOAD_PATH%/submodules_zip/
%SCP% -v qtbase-[% qt_license %]-src-[% qt_version %].zip %ARTF_UPLOAD_PATH%/submodules/

%SCP% -v qt-everywhere-[% qt_license %]-src-[% qt_version %].7z %ARTF_UPLOAD_PATH%/single/
%SCP% -v qtbase-[% qt_license %]-src-[% qt_version %].7z %ARTF_UPLOAD_PATH%/submodules_zip/
%SCP% -v qtbase-[% qt_license %]-src-[% qt_version %].7z %ARTF_UPLOAD_PATH%/submodules/

        </command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers>
    <hudson.tasks.BuildTrigger>
      <childProjects>Qt5_[% qt_license %]_build</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
      </threshold>
    </hudson.tasks.BuildTrigger>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
      <groovyScript>
[% boot_script %]
      </groovyScript>
      <behavior>0</behavior>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
  </publishers>
  <scm class="hudson.scm.NullSCM"/>
  <scmCheckoutRetryCount>5</scmCheckoutRetryCount>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
  <actions/>
  <keepDependencies>false</keepDependencies>
  <canRoam>true</canRoam>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <concurrentBuild>true</concurrentBuild>
</matrix-project>
